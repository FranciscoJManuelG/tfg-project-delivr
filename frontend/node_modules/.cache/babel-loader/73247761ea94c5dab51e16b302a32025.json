{"ast":null,"code":"import NetworkError from './NetworkError';\nconst SERVICE_TOKEN_NAME = 'serviceToken';\nlet networkErrorCallback;\nlet reauthenticationCallback;\n\nconst isJson = response => {\n  const contentType = response.headers.get(\"content-type\");\n  return contentType && contentType.indexOf(\"application/json\") !== -1;\n};\n\nconst handleOkResponse = (response, onSuccess) => {\n  if (!response.ok) {\n    return false;\n  }\n\n  if (!onSuccess) {\n    return true;\n  }\n\n  if (response.status === 204) {\n    onSuccess();\n    return true;\n  }\n\n  if (isJson(response)) {\n    response.json().then(payload => onSuccess(payload));\n  }\n\n  return true;\n};\n\nconst handle4xxResponse = (response, onErrors) => {\n  if (response.status < 400 || response.status >= 500) {\n    return false;\n  }\n\n  if (response.status === 401 && reauthenticationCallback) {\n    reauthenticationCallback();\n    return true;\n  }\n\n  if (!isJson(response)) {\n    throw new NetworkError();\n  }\n\n  if (onErrors) {\n    response.json().then(payload => {\n      if (payload.globalError || payload.fieldErrors) {\n        onErrors(payload);\n      }\n    });\n  }\n\n  return true;\n};\n\nconst handleResponse = (response, onSuccess, onErrors) => {\n  if (handleOkResponse(response, onSuccess)) {\n    return;\n  }\n\n  if (handle4xxResponse(response, onErrors)) {\n    return;\n  }\n\n  throw new NetworkError();\n};\n\nexport const init = callback => networkErrorCallback = callback;\nexport const setReauthenticationCallback = callback => reauthenticationCallback = callback;\nexport const setServiceToken = serviceToken => sessionStorage.setItem(SERVICE_TOKEN_NAME, serviceToken);\nexport const getServiceToken = () => sessionStorage.getItem(SERVICE_TOKEN_NAME);\nexport const removeServiceToken = () => sessionStorage.removeItem(SERVICE_TOKEN_NAME);\nexport const config = (method, body) => {\n  const config = {};\n  config.method = method;\n\n  if (body) {\n    if (body instanceof FormData) {\n      config.body = body;\n    } else {\n      config.headers = {\n        'Content-Type': 'application/json'\n      };\n      config.body = JSON.stringify(body);\n    }\n  }\n\n  let serviceToken = getServiceToken();\n\n  if (serviceToken) {\n    if (config.headers) {\n      config.headers['Authorization'] = `Bearer ${serviceToken}`;\n    } else {\n      config.headers = {\n        'Authorization': `Bearer ${serviceToken}`\n      };\n    }\n  }\n\n  return config;\n};\nexport const appFetch = (path, options, onSuccess, onErrors) => fetch(`${process.env.REACT_APP_BACKEND_URL}${path}`, options).then(response => handleResponse(response, onSuccess, onErrors)).catch(networkErrorCallback);","map":{"version":3,"sources":["/home/fran/software/tfg-project/frontend/src/backend/appFetch.js"],"names":["NetworkError","SERVICE_TOKEN_NAME","networkErrorCallback","reauthenticationCallback","isJson","response","contentType","headers","get","indexOf","handleOkResponse","onSuccess","ok","status","json","then","payload","handle4xxResponse","onErrors","globalError","fieldErrors","handleResponse","init","callback","setReauthenticationCallback","setServiceToken","serviceToken","sessionStorage","setItem","getServiceToken","getItem","removeServiceToken","removeItem","config","method","body","FormData","JSON","stringify","appFetch","path","options","fetch","process","env","REACT_APP_BACKEND_URL","catch"],"mappings":"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","sourcesContent":["import NetworkError from './NetworkError';\n\nconst SERVICE_TOKEN_NAME = 'serviceToken';\n\nlet networkErrorCallback;\nlet reauthenticationCallback;\n\nconst isJson = response => {\n\n    const contentType = response.headers.get(\"content-type\");\n\n    return contentType && contentType.indexOf(\"application/json\") !== -1;\n\n}\n\nconst handleOkResponse = (response, onSuccess) => {\n\n    if (!response.ok) {\n        return false;\n    }\n\n    if (!onSuccess) {\n        return true;\n    }\n\n    if (response.status === 204) {\n        onSuccess();\n        return true;\n    }\n\n    if (isJson(response)) {\n        response.json().then(payload => onSuccess(payload));\n    }\n\n    return true;\n\n}\n\nconst handle4xxResponse = (response, onErrors) => {\n\n    if (response.status < 400 || response.status >= 500) {\n        return false;\n    }\n\n    if (response.status === 401 && reauthenticationCallback){\n        reauthenticationCallback();\n        return true;\n    }\n\n    if (!isJson(response)) {\n        throw new NetworkError();\n    }\n\n    if (onErrors) {\n\n        response.json().then(payload => {\n            if (payload.globalError || payload.fieldErrors) {\n                onErrors(payload);\n            }\n        });\n\n    }\n\n    return true;\n\n}\n\nconst handleResponse = (response, onSuccess, onErrors) => {\n\n    if (handleOkResponse(response, onSuccess)) {\n        return;\n    }\n\n    if (handle4xxResponse(response, onErrors)) {\n        return;\n    }\n\n    throw new NetworkError();\n    \n}\n\nexport const init = callback => networkErrorCallback = callback;\n\nexport const setReauthenticationCallback = callback => reauthenticationCallback = callback;\n\nexport const setServiceToken = serviceToken => \n    sessionStorage.setItem(SERVICE_TOKEN_NAME, serviceToken);\n\nexport const getServiceToken = () => sessionStorage.getItem(SERVICE_TOKEN_NAME);\n\nexport const removeServiceToken = () => \n    sessionStorage.removeItem(SERVICE_TOKEN_NAME);\n\nexport const config = (method, body) => {\n\n    const config = {};\n\n    config.method = method;\n\n    if (body) {\n        if (body instanceof FormData) {\n            config.body = body;\n        } else  {\n            config.headers = {'Content-Type': 'application/json'};\n            config.body = JSON.stringify(body);\n        }\n    }\n\n    let serviceToken = getServiceToken();\n\n    if (serviceToken) {\n\n        if (config.headers) {\n            config.headers['Authorization'] = `Bearer ${serviceToken}`;\n        } else {\n            config.headers = {'Authorization': `Bearer ${serviceToken}`};\n        }\n\n    }\n\n    return config;\n\n}\n\nexport const appFetch = (path, options, onSuccess, onErrors) =>\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${path}`, options)\n        .then(response => handleResponse(response, onSuccess, onErrors))\n        .catch(networkErrorCallback);\n"]},"metadata":{},"sourceType":"module"}