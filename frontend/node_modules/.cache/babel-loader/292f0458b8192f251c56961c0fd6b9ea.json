{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport backend from '../../backend';\n\nconst signUpCompleted = authenticatedUser => ({\n  type: actionTypes.SIGN_UP_COMPLETED,\n  authenticatedUser\n});\n\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => dispatch => backend.userService.signUp(user, authenticatedUser => {\n  dispatch(signUpCompleted(authenticatedUser));\n  onSuccess();\n}, onErrors, reauthenticationCallback);\n\nconst loginCompleted = authenticatedUser => ({\n  type: actionTypes.LOGIN_COMPLETED,\n  authenticatedUser\n});\n\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) => dispatch => backend.userService.login(userName, password, authenticatedUser => {\n  dispatch(loginCompleted(authenticatedUser));\n  onSuccess();\n}, onErrors, reauthenticationCallback);\nexport const tryLoginFromServiceToken = reauthenticationCallback => dispatch => backend.userService.tryLoginFromServiceToken(authenticatedUser => {\n  if (authenticatedUser) {\n    dispatch(loginCompleted(authenticatedUser));\n  }\n}, reauthenticationCallback);\nexport const logout = () => {\n  backend.userService.logout();\n  return {\n    type: actionTypes.LOGOUT\n  };\n};\nexport const updateProfileCompleted = user => ({\n  type: actionTypes.UPDATE_PROFILE_COMPLETED,\n  user\n});\nexport const updateProfile = (user, onSuccess, onErrors) => dispatch => backend.userService.updateProfile(user, user => {\n  dispatch(updateProfileCompleted(user));\n  onSuccess();\n}, onErrors);\nexport const changePassword = (id, oldPassword, newPassword, onSuccess, onErrors) => dispatch => backend.userService.changePassword(id, oldPassword, newPassword, onSuccess, onErrors);","map":{"version":3,"sources":["/home/fran/software/tfg-project/frontend/src/modules/users/actions.js"],"names":["actionTypes","backend","signUpCompleted","authenticatedUser","type","SIGN_UP_COMPLETED","signUp","user","onSuccess","onErrors","reauthenticationCallback","dispatch","userService","loginCompleted","LOGIN_COMPLETED","login","userName","password","tryLoginFromServiceToken","logout","LOGOUT","updateProfileCompleted","UPDATE_PROFILE_COMPLETED","updateProfile","changePassword","id","oldPassword","newPassword"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,eAAe,GAAGC,iBAAiB,KAAK;AAC1CC,EAAAA,IAAI,EAAEJ,WAAW,CAACK,iBADwB;AAE1CF,EAAAA;AAF0C,CAAL,CAAzC;;AAKA,OAAO,MAAMG,MAAM,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,wBAA5B,KAAyDC,QAAQ,IACnFV,OAAO,CAACW,WAAR,CAAoBN,MAApB,CAA2BC,IAA3B,EACIJ,iBAAiB,IAAI;AACjBQ,EAAAA,QAAQ,CAACT,eAAe,CAACC,iBAAD,CAAhB,CAAR;AACAK,EAAAA,SAAS;AACZ,CAJL,EAKIC,QALJ,EAMIC,wBANJ,CADG;;AASP,MAAMG,cAAc,GAAGV,iBAAiB,KAAK;AACzCC,EAAAA,IAAI,EAAEJ,WAAW,CAACc,eADuB;AAEzCX,EAAAA;AAFyC,CAAL,CAAxC;;AAKA,OAAO,MAAMY,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBT,SAArB,EAAgCC,QAAhC,EAA0CC,wBAA1C,KAAuEC,QAAQ,IAChGV,OAAO,CAACW,WAAR,CAAoBG,KAApB,CAA0BC,QAA1B,EAAoCC,QAApC,EACId,iBAAiB,IAAI;AACjBQ,EAAAA,QAAQ,CAACE,cAAc,CAACV,iBAAD,CAAf,CAAR;AACAK,EAAAA,SAAS;AACZ,CAJL,EAKIC,QALJ,EAMIC,wBANJ,CADG;AAUP,OAAO,MAAMQ,wBAAwB,GAAGR,wBAAwB,IAAIC,QAAQ,IACxEV,OAAO,CAACW,WAAR,CAAoBM,wBAApB,CACIf,iBAAiB,IAAI;AACjB,MAAIA,iBAAJ,EAAuB;AACnBQ,IAAAA,QAAQ,CAACE,cAAc,CAACV,iBAAD,CAAf,CAAR;AACH;AACJ,CALL,EAMIO,wBANJ,CADG;AAWP,OAAO,MAAMS,MAAM,GAAG,MAAM;AAExBlB,EAAAA,OAAO,CAACW,WAAR,CAAoBO,MAApB;AAEA,SAAO;AAACf,IAAAA,IAAI,EAAEJ,WAAW,CAACoB;AAAnB,GAAP;AAEH,CANM;AAQP,OAAO,MAAMC,sBAAsB,GAAGd,IAAI,KAAK;AAC3CH,EAAAA,IAAI,EAAEJ,WAAW,CAACsB,wBADyB;AAE3Cf,EAAAA;AAF2C,CAAL,CAAnC;AAKP,OAAO,MAAMgB,aAAa,GAAG,CAAChB,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,KAA+BE,QAAQ,IAChEV,OAAO,CAACW,WAAR,CAAoBW,aAApB,CAAkChB,IAAlC,EACIA,IAAI,IAAI;AACJI,EAAAA,QAAQ,CAACU,sBAAsB,CAACd,IAAD,CAAvB,CAAR;AACAC,EAAAA,SAAS;AACZ,CAJL,EAKIC,QALJ,CADG;AAQP,OAAO,MAAMe,cAAc,GAAG,CAACC,EAAD,EAAKC,WAAL,EAAkBC,WAAlB,EAA+BnB,SAA/B,EAA0CC,QAA1C,KAAuDE,QAAQ,IACzFV,OAAO,CAACW,WAAR,CAAoBY,cAApB,CAAmCC,EAAnC,EAAuCC,WAAvC,EAAoDC,WAApD,EAAiEnB,SAAjE,EAA4EC,QAA5E,CADG","sourcesContent":["import * as actionTypes from './actionTypes';\nimport backend from '../../backend';\n\nconst signUpCompleted = authenticatedUser => ({\n    type: actionTypes.SIGN_UP_COMPLETED,\n    authenticatedUser\n});\n\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => dispatch =>\n    backend.userService.signUp(user,\n        authenticatedUser => {\n            dispatch(signUpCompleted(authenticatedUser));\n            onSuccess();\n        },\n        onErrors,\n        reauthenticationCallback);\n\nconst loginCompleted = authenticatedUser => ({\n    type: actionTypes.LOGIN_COMPLETED,\n    authenticatedUser\n});\n\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) => dispatch =>\n    backend.userService.login(userName, password,\n        authenticatedUser => {\n            dispatch(loginCompleted(authenticatedUser));\n            onSuccess();\n        },\n        onErrors,\n        reauthenticationCallback\n    );\n\nexport const tryLoginFromServiceToken = reauthenticationCallback => dispatch =>\n    backend.userService.tryLoginFromServiceToken(\n        authenticatedUser => {\n            if (authenticatedUser) {\n                dispatch(loginCompleted(authenticatedUser));\n            }\n        },\n        reauthenticationCallback\n    );\n    \n\nexport const logout = () => {\n\n    backend.userService.logout();\n\n    return {type: actionTypes.LOGOUT};\n\n};\n\nexport const updateProfileCompleted = user => ({\n    type: actionTypes.UPDATE_PROFILE_COMPLETED,\n    user\n})\n\nexport const updateProfile = (user, onSuccess, onErrors) => dispatch =>\n    backend.userService.updateProfile(user, \n        user => {\n            dispatch(updateProfileCompleted(user));\n            onSuccess();\n        },\n        onErrors);\n\nexport const changePassword = (id, oldPassword, newPassword, onSuccess, onErrors) => dispatch =>\n    backend.userService.changePassword(id, oldPassword, newPassword, onSuccess, onErrors);"]},"metadata":{},"sourceType":"module"}