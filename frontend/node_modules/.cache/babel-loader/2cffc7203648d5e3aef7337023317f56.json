{"ast":null,"code":"var _jsxFileName = \"/home/fran/software/tfg-project/frontend/src/modules/common/components/Errors.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst Errors = ({\n  errors,\n  onClose\n}) => {\n  const intl = useIntl();\n\n  if (!errors) {\n    return null;\n  }\n\n  let globalError;\n  let fieldErrors;\n\n  if (errors.globalError) {\n    globalError = errors.globalError;\n  } else if (errors.fieldErrors) {\n    fieldErrors = [];\n    errors.fieldErrors.forEach(e => {\n      let fieldName = intl.formatMessage({\n        id: `project.global.fields.${e.fieldName}`\n      });\n      fieldErrors.push(`${fieldName}: ${e.message}`);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"alert alert-danger alert-dismissible fade show\",\n    role: \"alert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, globalError ? globalError : '', fieldErrors ? React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, fieldErrors.map((fieldError, index) => React.createElement(\"li\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, fieldError))) : '', React.createElement(\"button\", {\n    type: \"button\",\n    className: \"close\",\n    \"data-dismiss\": \"alert\",\n    \"aria-label\": \"Close\",\n    onClick: () => onClose(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"\\xD7\")));\n};\n\nErrors.propTypes = {\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  onClose: PropTypes.func.isRequired\n};\nexport default Errors;","map":{"version":3,"sources":["/home/fran/software/tfg-project/frontend/src/modules/common/components/Errors.js"],"names":["React","PropTypes","useIntl","Errors","errors","onClose","intl","globalError","fieldErrors","forEach","e","fieldName","formatMessage","id","push","message","map","fieldError","index","propTypes","oneOfType","object","array","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,YAAtB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAD,KAAuB;AAElC,QAAMC,IAAI,GAAGJ,OAAO,EAApB;;AAEA,MAAI,CAACE,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AAED,MAAIG,WAAJ;AACA,MAAIC,WAAJ;;AAEA,MAAIJ,MAAM,CAACG,WAAX,EAAwB;AACpBA,IAAAA,WAAW,GAAGH,MAAM,CAACG,WAArB;AACH,GAFD,MAEO,IAAIH,MAAM,CAACI,WAAX,EAAwB;AAC3BA,IAAAA,WAAW,GAAG,EAAd;AACAJ,IAAAA,MAAM,CAACI,WAAP,CAAmBC,OAAnB,CAA2BC,CAAC,IAAI;AAC5B,UAAIC,SAAS,GAAGL,IAAI,CAACM,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAG,yBAAwBH,CAAC,CAACC,SAAU;AAA1C,OAAnB,CAAhB;AACAH,MAAAA,WAAW,CAACM,IAAZ,CAAkB,GAAEH,SAAU,KAAID,CAAC,CAACK,OAAQ,EAA5C;AACH,KAHD;AAKH;;AAED,SAEI;AAAK,IAAA,SAAS,EAAC,gDAAf;AAAgE,IAAA,IAAI,EAAC,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKR,WAAW,GAAGA,WAAH,GAAiB,EAFjC,EAIKC,WAAW,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,WAAW,CAACQ,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,KACb;AAAI,IAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBD,UAAjB,CADH,CADL,CADQ,GAOR,EAXR,EAcI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,OAAhC;AAAwC,oBAAa,OAArD;AAA6D,kBAAW,OAAxE;AACI,IAAA,OAAO,EAAE,MAAMZ,OAAO,EAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAM,mBAAY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CAdJ,CAFJ;AAyBH,CA/CD;;AAiDAF,MAAM,CAACgB,SAAP,GAAmB;AACff,EAAAA,MAAM,EAAEH,SAAS,CAACmB,SAAV,CAAoB,CAACnB,SAAS,CAACoB,MAAX,EAAmBpB,SAAS,CAACqB,KAA7B,CAApB,CADO;AAEfjB,EAAAA,OAAO,EAAEJ,SAAS,CAACsB,IAAV,CAAeC;AAFT,CAAnB;AAKA,eAAerB,MAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {useIntl} from 'react-intl';\n\nconst Errors = ({errors, onClose}) => {\n\n    const intl = useIntl();\n\n    if (!errors) {\n        return null;\n    }\n\n    let globalError;\n    let fieldErrors;\n\n    if (errors.globalError) {\n        globalError = errors.globalError;\n    } else if (errors.fieldErrors) {\n        fieldErrors = [];\n        errors.fieldErrors.forEach(e => {\n            let fieldName = intl.formatMessage({id: `project.global.fields.${e.fieldName}`});\n            fieldErrors.push(`${fieldName}: ${e.message}`)\n        });\n\n    }\n\n    return (\n\n        <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n\n            {globalError ? globalError : ''}\n\n            {fieldErrors ?\n                <ul>\n                    {fieldErrors.map((fieldError, index) =>\n                        <li key={index}>{fieldError}</li>\n                    )}\n                </ul>\n                : \n                ''\n            }\n\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" \n                onClick={() => onClose()}>\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n\n        </div>\n\n    );\n\n}\n\nErrors.propTypes = {\n    errors: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClose: PropTypes.func.isRequired\n};\n\nexport default Errors;\n"]},"metadata":{},"sourceType":"module"}