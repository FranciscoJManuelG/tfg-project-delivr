{"ast":null,"code":"import _slicedToArray from \"/home/fran/software/tfg-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/fran/software/tfg-project/frontend/src/modules/users/components/Login.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { Errors } from '../../common';\nimport * as actions from '../actions';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        userName = _useState2[0],\n        setUserName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        backendErrors = _useState6[0],\n        setBackendErrors = _useState6[1];\n\n  let form;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (form.checkValidity()) {\n      dispatch(actions.login(userName.trim(), password, () => history.push('/'), errors => setBackendErrors(errors), () => {\n        history.push('/users/login');\n        dispatch(actions.logout());\n      }));\n    } else {\n      setBackendErrors(null);\n      form.classList.add('was-validated');\n    }\n  };\n  /*<div class=\"container\">\n      <div class=\"row\">\n          <aside class=\"col-sm-4\">\n              <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n              <div class=\"card\">\n                  <article class=\"card-body\">\n                  \t<a href=\"/users/signup\" class=\"float-right btn btn-outline-primary\">Regístrate</a>\n                  \t<h4 class=\"card-title mb-4 mt-1\">Inicia sesión</h4>\n                  \t<br/>\n                      <form ref={node => form = node} class=\"needs-validation\" noValidate onSubmit={e => handleSubmit(e)}>\n                          <div class=\"form-group\">\n                              <input type=\"text\" id=\"userName\" class=\"form-control\" placeholder=\"Introduce tu email\"\n                                  value={userName}\n                                  onChange={e => setUserName(e.target.value)}\n                                  autoFocus\n                                  required/>\n                              <div className=\"invalid-feedback\">\n                                  <FormattedMessage id='project.global.validator.required'/>\n                              </div>\n                          </div> <!-- form-group// -->\n                          <div class=\"form-group\">\n                              <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Introduce tu contraseña\"\n                                  value={password}\n                                  onChange={e => setPassword(e.target.value)}\n                                  required/>\n                              <div className=\"invalid-feedback\">\n                                  <FormattedMessage id='project.global.validator.required'/>\n                              </div>\n                          </div> <!-- form-group// -->    \n                          <br/>\n                          <div class=\"row\">\n                              <div class=\"col\">\n                                  <div class=\"form-group\">\n                                      <button type=\"submit\" class=\"btn btn-primary btn-block\">Inicia sesión</button>\n                                  </div> <!-- form-group// -->\n                              </div>\n                          </div> <!-- .row// -->                                                                  \n                      </form>\n                  </article>\n              </div> <!-- card.// -->\n  \t    </aside> <!-- col.// -->\n      </div> <!-- row.// -->\n  </div> \n  <!--container end.//-->*/\n\n\n  return React.createElement(\"div\", {\n    class: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"aside\", {\n    class: \"col-sm-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Errors, {\n    errors: backendErrors,\n    onClose: () => setBackendErrors(null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    class: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    class: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/users/signup\",\n    class: \"float-right btn btn-outline-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Reg\\xEDstrate\"), React.createElement(\"h4\", {\n    class: \"card-title mb-4 mt-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Inicia sesi\\xF3n\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    ref: node => form = node,\n    class: \"needs-validation\",\n    noValidate: true,\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"userName\",\n    class: \"form-control\",\n    placeholder: \"Introduce tu email\",\n    value: userName,\n    onChange: e => setUserName(e.target.value),\n    autoFocus: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"project.global.validator.required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    class: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    class: \"form-control\",\n    placeholder: \"Introduce tu contrase\\xF1a\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"project.global.validator.required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary btn-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Inicia sesi\\xF3n\"))))))))))\n  /*<div>\n      <div className=\"card bg-light border-dark\">\n          <p className=\"text-left\">\n              <Link to=\"/users/signup\">\n                  <FormattedMessage id=\"project.users.SignUpClient.title\"/>\n              </Link>\n          </p>\n          <p className=\"text-right\">\n              <Link to=\"/users/signup\">\n                  <FormattedMessage id=\"project.users.SignUpCompany.title\"/>\n              </Link>\n          </p>\n      </div>\n      <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n      <div className=\"card bg-light border-dark\">\n          <h5 className=\"card-header\">\n              <FormattedMessage id=\"project.users.Login.title\"/>\n          </h5>\n          <div className=\"card-body\">\n              <form ref={node => form = node} \n                  className=\"needs-validation\" noValidate \n                  onSubmit={e => handleSubmit(e)}>\n                  <div className=\"form-group row\">\n                      <label htmlFor=\"userName\" className=\"col-md-3 col-form-label\">\n                          <FormattedMessage id=\"project.global.fields.userName\"/>\n                      </label>\n                      <div className=\"col-md-4\">\n                          <input type=\"text\" id=\"userName\" className=\"form-control\"\n                              value={userName}\n                              onChange={e => setUserName(e.target.value)}\n                              autoFocus\n                              required/>\n                          <div className=\"invalid-feedback\">\n                              <FormattedMessage id='project.global.validator.required'/>\n                          </div>\n                      </div>\n                  </div>\n                  <div className=\"form-group row\">\n                      <label htmlFor=\"password\" className=\"col-md-3 col-form-label\">\n                          <FormattedMessage id=\"project.global.fields.password\"/>\n                      </label>\n                      <div className=\"col-md-4\">\n                          <input type=\"password\" id=\"password\" className=\"form-control\"\n                              value={password}\n                              onChange={e => setPassword(e.target.value)}\n                              required/>\n                          <div className=\"invalid-feedback\">\n                              <FormattedMessage id='project.global.validator.required'/>\n                          </div>\n                      </div>\n                  </div>\n                  <div className=\"form-group row\">\n                      <div className=\"offset-md-3 col-md-1\">\n                          <button type=\"submit\" className=\"btn btn-primary\">\n                              <FormattedMessage id=\"project.users.Login.title\"/>\n                          </button>\n                      </div>\n                  </div>\n              </form>\n          </div>\n      </div>\n  </div>*/\n  ;\n};\n\nexport default Login;","map":{"version":3,"sources":["/home/fran/software/tfg-project/frontend/src/modules/users/components/Login.js"],"names":["React","useState","useDispatch","Link","FormattedMessage","useHistory","Errors","actions","Login","dispatch","history","userName","setUserName","password","setPassword","backendErrors","setBackendErrors","form","handleSubmit","event","preventDefault","checkValidity","login","trim","push","errors","logout","classList","add","node","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\n\nconst Login = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [backendErrors, setBackendErrors] = useState(null);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n\n            dispatch(actions.login(\n                userName.trim(),\n                password,\n                () => history.push('/'),\n                errors => setBackendErrors(errors),\n                () => {\n                    history.push('/users/login');\n                    dispatch(actions.logout());\n                }\n            ));\n\n        } else {\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n        }\n\n    }\n/*<div class=\"container\">\n    <div class=\"row\">\n        <aside class=\"col-sm-4\">\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div class=\"card\">\n                <article class=\"card-body\">\n                \t<a href=\"/users/signup\" class=\"float-right btn btn-outline-primary\">Regístrate</a>\n                \t<h4 class=\"card-title mb-4 mt-1\">Inicia sesión</h4>\n                \t<br/>\n                    <form ref={node => form = node} class=\"needs-validation\" noValidate onSubmit={e => handleSubmit(e)}>\n                        <div class=\"form-group\">\n                            <input type=\"text\" id=\"userName\" class=\"form-control\" placeholder=\"Introduce tu email\"\n                                value={userName}\n                                onChange={e => setUserName(e.target.value)}\n                                autoFocus\n                                required/>\n                            <div className=\"invalid-feedback\">\n                                <FormattedMessage id='project.global.validator.required'/>\n                            </div>\n                        </div> <!-- form-group// -->\n                        <div class=\"form-group\">\n                            <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Introduce tu contraseña\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                                required/>\n                            <div className=\"invalid-feedback\">\n                                <FormattedMessage id='project.global.validator.required'/>\n                            </div>\n                        </div> <!-- form-group// -->    \n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <div class=\"form-group\">\n                                    <button type=\"submit\" class=\"btn btn-primary btn-block\">Inicia sesión</button>\n                                </div> <!-- form-group// -->\n                            </div>\n                        </div> <!-- .row// -->                                                                  \n                    </form>\n                </article>\n            </div> <!-- card.// -->\n\t    </aside> <!-- col.// -->\n    </div> <!-- row.// -->\n</div> \n<!--container end.//-->*/\n    return (\n        <div class=\"container\">\n            <div class=\"row\">\n                <aside class=\"col-sm-4\">\n                    <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n                    <div class=\"card\">\n                        <article class=\"card-body\">\n                \t        <a href=\"/users/signup\" class=\"float-right btn btn-outline-primary\">Regístrate</a>\n                \t        <h4 class=\"card-title mb-4 mt-1\">Inicia sesión</h4>\n                \t        <br/>\n                            <form ref={node => form = node} class=\"needs-validation\" noValidate onSubmit={e => handleSubmit(e)}>\n                                <div class=\"form-group\">\n                                    <input type=\"text\" id=\"userName\" class=\"form-control\" placeholder=\"Introduce tu email\"\n                                        value={userName}\n                                        onChange={e => setUserName(e.target.value)}\n                                        autoFocus\n                                        required/>\n                                    <div className=\"invalid-feedback\">\n                                        <FormattedMessage id='project.global.validator.required'/>\n                                    </div>\n                                </div> \n                                <div class=\"form-group\">\n                                    <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Introduce tu contraseña\"\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                        required/>\n                                    <div className=\"invalid-feedback\">\n                                        <FormattedMessage id='project.global.validator.required'/>\n                                    </div>\n                                </div>    \n                                <br/>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <div class=\"form-group\">\n                                            <button type=\"submit\" class=\"btn btn-primary btn-block\">Inicia sesión</button>\n                                        </div> \n                                    </div>\n                                </div>                                                              \n                            </form>\n                        </article>\n                    </div>\n\t            </aside> \n            </div>\n        </div> \n        /*<div>\n            <div className=\"card bg-light border-dark\">\n                <p className=\"text-left\">\n                    <Link to=\"/users/signup\">\n                        <FormattedMessage id=\"project.users.SignUpClient.title\"/>\n                    </Link>\n                </p>\n                <p className=\"text-right\">\n                    <Link to=\"/users/signup\">\n                        <FormattedMessage id=\"project.users.SignUpCompany.title\"/>\n                    </Link>\n                </p>\n            </div>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.users.Login.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node} \n                        className=\"needs-validation\" noValidate \n                        onSubmit={e => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"userName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.userName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"userName\" className=\"form-control\"\n                                    value={userName}\n                                    onChange={e => setUserName(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"password\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.password\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"password\" id=\"password\" className=\"form-control\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-1\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.users.Login.title\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>*/\n    );\n\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}