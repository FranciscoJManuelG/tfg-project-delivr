{"ast":null,"code":"import { config, appFetch, setServiceToken, getServiceToken, removeServiceToken, setReauthenticationCallback } from './appFetch';\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) => appFetch('/users/login', config('POST', {\n  userName,\n  password\n}), authenticatedUser => {\n  setServiceToken(authenticatedUser.serviceToken);\n  setReauthenticationCallback(reauthenticationCallback);\n  onSuccess(authenticatedUser);\n}, onErrors);\nexport const tryLoginFromServiceToken = (onSuccess, reauthenticationCallback) => {\n  const serviceToken = getServiceToken();\n\n  if (!serviceToken) {\n    onSuccess();\n    return;\n  }\n\n  setReauthenticationCallback(reauthenticationCallback);\n  appFetch('/users/loginFromServiceToken', config('POST'), authenticatedUser => onSuccess(authenticatedUser), () => removeServiceToken());\n};\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => {\n  appFetch('/users/signUp', config('POST', user), authenticatedUser => {\n    setServiceToken(authenticatedUser.serviceToken);\n    setReauthenticationCallback(reauthenticationCallback);\n    onSuccess(authenticatedUser);\n  }, onErrors);\n};\nexport const signUpBusiness = (user, onSuccess, onErrors, reauthenticationCallback) => {\n  appFetch('/users/signUpBusiness', config('POST', user), authenticatedUser => {\n    setServiceToken(authenticatedUser.serviceToken);\n    setReauthenticationCallback(reauthenticationCallback);\n    onSuccess(authenticatedUser);\n  }, onErrors);\n};\nexport const logout = () => removeServiceToken();\nexport const updateProfile = (user, onSuccess, onErrors) => appFetch(`/users/${user.id}`, config('PUT', user), onSuccess, onErrors);\nexport const changePassword = (id, oldPassword, newPassword, onSuccess, onErrors) => appFetch(`/users/${id}/changePassword`, config('POST', {\n  oldPassword,\n  newPassword\n}), onSuccess, onErrors);","map":{"version":3,"sources":["/home/fran/software/tfg-project/frontend/src/backend/userService.js"],"names":["config","appFetch","setServiceToken","getServiceToken","removeServiceToken","setReauthenticationCallback","login","userName","password","onSuccess","onErrors","reauthenticationCallback","authenticatedUser","serviceToken","tryLoginFromServiceToken","signUp","user","signUpBusiness","logout","updateProfile","id","changePassword","oldPassword","newPassword"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,QAAhB,EAA0BC,eAA1B,EAA2CC,eAA3C,EAA4DC,kBAA5D,EAAgFC,2BAAhF,QAAkH,YAAlH;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,wBAA1C,KACjBV,QAAQ,CAAC,cAAD,EAAiBD,MAAM,CAAC,MAAD,EAAS;AAACO,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAT,CAAvB,EACJI,iBAAiB,IAAI;AACjBV,EAAAA,eAAe,CAACU,iBAAiB,CAACC,YAAnB,CAAf;AACAR,EAAAA,2BAA2B,CAACM,wBAAD,CAA3B;AACAF,EAAAA,SAAS,CAACG,iBAAD,CAAT;AACH,CALG,EAMJF,QANI,CADL;AASP,OAAO,MAAMI,wBAAwB,GAAG,CAACL,SAAD,EAAYE,wBAAZ,KAAyC;AAE7E,QAAME,YAAY,GAAGV,eAAe,EAApC;;AAEA,MAAI,CAACU,YAAL,EAAmB;AACfJ,IAAAA,SAAS;AACT;AACH;;AAEDJ,EAAAA,2BAA2B,CAACM,wBAAD,CAA3B;AAEAV,EAAAA,QAAQ,CAAC,8BAAD,EAAiCD,MAAM,CAAC,MAAD,CAAvC,EACJY,iBAAiB,IAAIH,SAAS,CAACG,iBAAD,CAD1B,EAEJ,MAAMR,kBAAkB,EAFpB,CAAR;AAKH,CAhBM;AAkBP,OAAO,MAAMW,MAAM,GAAG,CAACC,IAAD,EAAOP,SAAP,EAAkBC,QAAlB,EAA4BC,wBAA5B,KAAyD;AAE3EV,EAAAA,QAAQ,CAAC,eAAD,EAAkBD,MAAM,CAAC,MAAD,EAASgB,IAAT,CAAxB,EACJJ,iBAAiB,IAAI;AACjBV,IAAAA,eAAe,CAACU,iBAAiB,CAACC,YAAnB,CAAf;AACAR,IAAAA,2BAA2B,CAACM,wBAAD,CAA3B;AACAF,IAAAA,SAAS,CAACG,iBAAD,CAAT;AACH,GALG,EAMJF,QANI,CAAR;AAQH,CAVM;AAYP,OAAO,MAAMO,cAAc,GAAG,CAACD,IAAD,EAAOP,SAAP,EAAkBC,QAAlB,EAA4BC,wBAA5B,KAAyD;AAEnFV,EAAAA,QAAQ,CAAC,uBAAD,EAA0BD,MAAM,CAAC,MAAD,EAASgB,IAAT,CAAhC,EACJJ,iBAAiB,IAAI;AACjBV,IAAAA,eAAe,CAACU,iBAAiB,CAACC,YAAnB,CAAf;AACAR,IAAAA,2BAA2B,CAACM,wBAAD,CAA3B;AACAF,IAAAA,SAAS,CAACG,iBAAD,CAAT;AACH,GALG,EAMJF,QANI,CAAR;AAQH,CAVM;AAYP,OAAO,MAAMQ,MAAM,GAAG,MAAMd,kBAAkB,EAAvC;AAEP,OAAO,MAAMe,aAAa,GAAG,CAACH,IAAD,EAAOP,SAAP,EAAkBC,QAAlB,KACzBT,QAAQ,CAAE,UAASe,IAAI,CAACI,EAAG,EAAnB,EAAsBpB,MAAM,CAAC,KAAD,EAAQgB,IAAR,CAA5B,EACJP,SADI,EACOC,QADP,CADL;AAIP,OAAO,MAAMW,cAAc,GAAG,CAACD,EAAD,EAAKE,WAAL,EAAkBC,WAAlB,EAA+Bd,SAA/B,EAC1BC,QAD0B,KAE1BT,QAAQ,CAAE,UAASmB,EAAG,iBAAd,EACJpB,MAAM,CAAC,MAAD,EAAS;AAACsB,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAT,CADF,EAEJd,SAFI,EAEOC,QAFP,CAFL","sourcesContent":["import {config, appFetch, setServiceToken, getServiceToken, removeServiceToken, setReauthenticationCallback} from './appFetch';\n\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) =>\n    appFetch('/users/login', config('POST', {userName, password}),\n        authenticatedUser => {\n            setServiceToken(authenticatedUser.serviceToken);\n            setReauthenticationCallback(reauthenticationCallback);\n            onSuccess(authenticatedUser);\n        }, \n        onErrors);\n\nexport const tryLoginFromServiceToken = (onSuccess, reauthenticationCallback) => {\n\n    const serviceToken = getServiceToken();\n\n    if (!serviceToken) {\n        onSuccess();\n        return;\n    }\n\n    setReauthenticationCallback(reauthenticationCallback);\n\n    appFetch('/users/loginFromServiceToken', config('POST'),\n        authenticatedUser => onSuccess(authenticatedUser),\n        () => removeServiceToken()\n    );\n\n}\n\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => {\n\n    appFetch('/users/signUp', config('POST', user), \n        authenticatedUser => {\n            setServiceToken(authenticatedUser.serviceToken);\n            setReauthenticationCallback(reauthenticationCallback);\n            onSuccess(authenticatedUser);\n        }, \n        onErrors);\n\n}\n\nexport const signUpBusiness = (user, onSuccess, onErrors, reauthenticationCallback) => {\n\n    appFetch('/users/signUpBusiness', config('POST', user), \n        authenticatedUser => {\n            setServiceToken(authenticatedUser.serviceToken);\n            setReauthenticationCallback(reauthenticationCallback);\n            onSuccess(authenticatedUser);\n        }, \n        onErrors);\n\n}\n\nexport const logout = () => removeServiceToken();\n\nexport const updateProfile = (user, onSuccess, onErrors) =>\n    appFetch(`/users/${user.id}`, config('PUT', user),\n        onSuccess, onErrors);\n\nexport const changePassword = (id, oldPassword, newPassword, onSuccess,\n    onErrors) =>\n    appFetch(`/users/${id}/changePassword`, \n        config('POST', {oldPassword, newPassword}),\n        onSuccess, onErrors);"]},"metadata":{},"sourceType":"module"}